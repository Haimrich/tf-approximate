from __future__ import print_function
import sys
import re

def parse_cfile(cfiles):
    out = ["// generated by %s with cfiles = %s" % (__file__, str(cfiles)), "#include <stdint.h>",  "#include <assert.h>", "#include <stdlib.h>"]

    alld = ""
    for fn in cfiles:
        cfile = "".join(open(fn).readlines())

        r_remove = re.compile(r"/[*].*?[*]/", re.DOTALL |re.M)
        cfile = r_remove.sub("", cfile)
        cfile = re.sub(r"//.*", "", cfile)
        cfile = re.sub(r"#include.*", "", cfile)


        level = 0
        for l in cfile.split("\n"):
            level -= l.count("}")
            if level == 0 and l:
                alld += "\n" + l
            #print(level, l)
            level += l.count("{")

    
    r_func = re.compile(r"\s*(\S+ (\S+)\((\s*const)?\s*\S+\s+\S\s*,(\s*const)?\s*\S+\s+\S\s*\))", re.MULTILINE) # all two - input functions

    #print(alld)
    allfn = []
    for proto, fn, _, _ in r_func.findall(alld):
        allfn.append(fn)
        out.append(proto + ";")
    allfni = zip(range(len(allfn)), allfn)
    
    out.append("")
    out.append("static int AxFindId(const char * fn) {")
    for i, fn in allfni:
        out.append("  if(strcmp(fn, \"%s\") == 0) return %d; " % (fn, i))
    out.append("  return -1; ")
    out.append("}")

    out.append("")
    out.append("static unsigned int AxDo(int fid, unsigned int a, unsigned int b) {")
    out.append("  switch(fid) {")
    for i, fn in allfni:
        out.append("     case %d: return %s(a, b); " % (i, fn))
    out.append("     default: assert(false); ")
    out.append("  }")
    out.append("}")

    return "\n".join(out)



if __name__ == "__main__":
    if len(sys.argv) == 1: 
        print("Usage: %s file1 file2 ..." % sys.argv[0])
        print("Generates header file with approximate functions and with the parser")
        sys.exit(1)
    
    print(parse_cfile(sys.argv[1:]))